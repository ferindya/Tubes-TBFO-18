FORHEAD -> for VAR in range ( VRANGE ) | for VAR in VAL | for VAR, VAR in VAL;
VRANGE -> VAL , VAL | VAL | VAL , VAL , VAL;
FUNCTION -> VAR ( VFUNCTION ) | FUNCTION ( FUNCTION ) | VAR ( );
VFUNCTION -> VFUNCTION , VFUNCTION | VAL | VAR = VAL;
FOR -> FORHEAD : SLOOP;
BOOLEAN -> True | False;
NONE -> None;
OPLOGIC -> and | or;
OPIDENTITY -> is | is not | in;
IMPORT -> from VAR import VIMPORT | from VAR import* | import VIMPORT | import VAR as VAR | from VAR import VAR as VAR;
VIMPORT -> VAR | VIMPORT , VIMPORT;
VWITH -> VAL | VAL , VAL | VAL , VAL , VAL | VAL , VAL , VAL , VAL | VAL , VAL , VAL , VAL , VAL | VAL , VAL , VAL , VAL , VAL , VAL | VAL , VAL , VAL , VAL , VAL , VAL , VAL | VAL , VAL , VAL , VAL , VAL , VAL , VAL , VAL;
WITH -> with open ( VWITH ) : S | with open ( VWITH ) as VAR : S;
WHILE -> while COMP : SLOOP;
COMP -> BOOLEAN | VAR | ( COMP ) | COMP OPLOGIC COMP | COMPOPRT OPCOMP COMPOPRT | COMPOPRT OPCOMP = COMPOPRT | COMPOPRT = = COMPOPRT | not VAR | not COMP | COMPOPRT OPIDENTITY COMPOPRT;
COMPOPRT -> COMPOPRT OPARITH COMPOPRT | COMPOPRT OPCOMP COMPOPRT | COMPOPRT OPCOMP = COMPOPRT | VAL | VAL OPARITH VAL | VAL * * VAL | VAL / / VAL | VAL > > VAL | VAL < < VAL | VAL OPCOMP VAL | VAL OPCOMP = VAL | ( COMPOPRT );
RAISE -> raise VAR ( STRING ) | raise ( STRING ) | raise ( );
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;